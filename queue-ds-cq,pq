#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int front, rear;
    int arr[MAX];
} CircularQueue;

typedef struct {
    int size;
    int arr[MAX];
    int priority[MAX];
} PriorityQueue;

void initializeCircularQueue(CircularQueue *q);
int isCircularQueueEmpty(CircularQueue *q);
int isCircularQueueFull(CircularQueue *q);
void enqueueCircularQueue(CircularQueue *q, int value);
int dequeueCircularQueue(CircularQueue *q);
void displayCircularQueue(CircularQueue *q);

void initializePriorityQueue(PriorityQueue *pq);
int isPriorityQueueEmpty(PriorityQueue *pq);
void enqueuePriorityQueue(PriorityQueue *pq, int value, int priority);
int dequeuePriorityQueue(PriorityQueue *pq);
void displayPriorityQueue(PriorityQueue *pq);

int main() {
    CircularQueue cq;
    PriorityQueue pq;
    int choice, value, priority;

    initializeCircularQueue(&cq);
    initializePriorityQueue(&pq);

    while (1) {
        printf("\nMenu:\n");
        printf("1. Circular Queue Insertion\n");
        printf("2. Circular Queue Deletion\n");
        printf("3. Circular Queue Display\n");
        printf("4. Priority Queue Insertion\n");
        printf("5. Priority Queue Deletion\n");
        printf("6. Priority Queue Display\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to enqueue in Circular Queue: ");
                scanf("%d", &value);
                enqueueCircularQueue(&cq, value);
                break;
            case 2:
                if (isCircularQueueEmpty(&cq)) {
                    printf("Circular Queue is empty.\n");
                } else {
                    value = dequeueCircularQueue(&cq);
                    printf("Deleted value from Circular Queue: %d\n", value);
                }
                break;
            case 3:
                displayCircularQueue(&cq);
                break;
            case 4:
                printf("Enter value to enqueue in Priority Queue: ");
                scanf("%d", &value);
                printf("Enter priority: ");
                scanf("%d", &priority);
                enqueuePriorityQueue(&pq, value, priority);
                break;
            case 5:
                if (isPriorityQueueEmpty(&pq)) {
                    printf("Priority Queue is empty.\n");
                } else {
                    value = dequeuePriorityQueue(&pq);
                    printf("Deleted value from Priority Queue: %d\n", value);
                }
                break;
            case 6:
                displayPriorityQueue(&pq);
                break;
            case 7:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void initializeCircularQueue(CircularQueue *q) {
    q->front = q->rear = -1;
}

int isCircularQueueEmpty(CircularQueue *q) {
    return q->front == -1;
}

int isCircularQueueFull(CircularQueue *q) {
    return (q->rear + 1) % MAX == q->front;
}

void enqueueCircularQueue(CircularQueue *q, int value) {
    if (isCircularQueueFull(q)) {
        printf("Circular Queue is full.\n");
        return;
    }
    if (isCircularQueueEmpty(q)) {
        q->front = q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % MAX;
    }
    q->arr[q->rear] = value;
}

int dequeueCircularQueue(CircularQueue *q) {
    if (isCircularQueueEmpty(q)) {
        printf("Circular Queue is empty.\n");
        return -1;
    }
    int value = q->arr[q->front];
    if (q->front == q->rear) {
        q->front = q->rear = -1; // Queue is empty
    } else {
        q->front = (q->front + 1) % MAX;
    }
    return value;
}

void displayCircularQueue(CircularQueue *q) {
    if (isCircularQueueEmpty(q)) {
        printf("Circular Queue is empty.\n");
        return;
    }
    int i = q->front;
    while (1) {
        printf("%d ", q->arr[i]);
        if (i == q->rear) break;
        i = (i + 1) % MAX;
    }
    printf("\n");
}

void initializePriorityQueue(PriorityQueue *pq) {
    pq->size = 0;
}

int isPriorityQueueEmpty(PriorityQueue *pq) {
    return pq->size == 0;
}

void enqueuePriorityQueue(PriorityQueue *pq, int value, int priority) {
    if (pq->size == MAX) {
        printf("Priority Queue is full.\n");
        return;
    }
    int i = pq->size - 1;
    while (i >= 0 && pq->priority[i] < priority) {
        pq->arr[i + 1] = pq->arr[i];
        pq->priority[i + 1] = pq->priority[i];
        i--;
    }
    pq->arr[i + 1] = value;
    pq->priority[i + 1] = priority;
    pq->size++;
}

int dequeuePriorityQueue(PriorityQueue *pq) {
    if (isPriorityQueueEmpty(pq)) {
        printf("Priority Queue is empty.\n");
        return -1;
    }
    return pq->arr[--pq->size];
}

void displayPriorityQueue(PriorityQueue *pq) {
    if (isPriorityQueueEmpty(pq)) {
        printf("Priority Queue is empty.\n");
        return;
    }
    for (int i = 0; i < pq->size; i++) {
        printf("Value: %d, Priority: %d\n", pq->arr[i], pq->priority[i]);
    }
}

